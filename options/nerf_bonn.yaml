_parent_: options/nerf_llff.yaml

group: bonn

camera:                                                     # camera options
    noise:                                                  # synthetic perturbations on the camera poses (Blender only)

nerf:
    view_dep: false                                         # condition MLP on viewpoint
    depth:
        range: [10,0]                                       # near/far bounds for depth sampling

optim:                                                      # optimization options
    lr_pose: 3.e-3                                          # learning rate of camera poses
    lr_pose_end: 1.e-5                                      # terminal learning rate of camera poses (only used with sched_pose.type=ExponentialLR)
    sched_pose:                                             # learning rate scheduling options
        type: ExponentialLR                                 # scheduler (see PyTorch doc)
        gamma:                                              # decay rate (can be empty if lr_pose_end were specified)
    warmup_pose:                                            # linear warmup of the pose learning rate (N iterations)
    test_photo: true                                        # test-time photometric optimization for evaluation
    test_iter: 100                                          # number of iterations for test-time optimization

max_iter: 50000                                             # train to maximum number of iterations

data:
    dataset: bonn
    image_size: [480,640]                                   # input image sizes [height,width]
    init_poses: true                                       # initialize poses using dataset trajectory estimate
    focal: 610                                              # camera intrinsic focal length
    val_sub: 3                                              # consider a subset of N validation samples

eval:
    vid_pose: false
    vid_novel_view: false
    render_train: true
    render_train_ckpts:                                     # list of ckpt iters to render, otherwise render all
    save_pose: false
    fruit_nn: "/automount_home_students/skelly/eth/implicit-mapping/fruit-detector-weights/strawberry.pth"  # compute metrics on fruit-only regions using the fruit detector NN at this path

freq:
    val: 5000                                               # validate on val set (every N iters)
    val_previews: []                                        # also validate on these iteration numbers
    val_n_log: 3                                            # log up to N val results to tensorboard
    vis: 5000
    ckpt: 5000                                              # save checkpoint (every N iters)

visdom:                                                     # Visdom options
